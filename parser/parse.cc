// Generated by Bisonc++ V4.13.01 on Tue, 08 Nov 2016 23:20:29 +0100

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {300, 2}, // 1: prog (_EOF_) ->  mainElement _EOF_
     {301, 2}, // 2: mainElement ->  mainElement func
     {301, 0}, // 3: mainElement ->  <empty>
     {302, 4}, // 4: func (FUNC) ->  FUNC ID params block_instructions
     {303, 3}, // 5: params (OPARENTHESIS) ->  OPARENTHESIS paramlist CPARENTHESIS
     {305, 2}, // 6: paramlist ->  param multiple_params
     {305, 0}, // 7: paramlist ->  <empty>
     {307, 3}, // 8: multiple_params (COMMA) ->  multiple_params COMMA param
     {307, 0}, // 9: multiple_params ->  <empty>
     {306, 2}, // 10: param (ANDPERSAND) ->  ANDPERSAND ID
     {304, 4}, // 11: block_instructions (OBRACER) ->  OBRACER instruction multiple_instrucitons CBRACER
     {309, 3}, // 12: multiple_instrucitons (SEMICOLON) ->  multiple_instrucitons SEMICOLON instruction
     {309, 0}, // 13: multiple_instrucitons ->  <empty>
     {308, 1}, // 14: instruction ->  assign
     {308, 1}, // 15: instruction ->  ite_stmt
     {308, 1}, // 16: instruction ->  while_stmt
     {308, 1}, // 17: instruction ->  funcall
     {308, 1}, // 18: instruction ->  return_stmt
     {308, 0}, // 19: instruction ->  <empty>
     {310, 3}, // 20: assign (ID) ->  ID ASSIGMENT expr
     {311, 5}, // 21: ite_stmt (IF) ->  IF expr block_instructions else_if else
     {314, 5}, // 22: else_if (ELSE) ->  else_if ELSE IF expr block_instructions
     {314, 0}, // 23: else_if ->  <empty>
     {315, 2}, // 24: else (ELSE) ->  ELSE block_instructions
     {315, 0}, // 25: else ->  <empty>
     {312, 3}, // 26: while_stmt (WHILE) ->  WHILE expr block_instructions
     {313, 2}, // 27: return_stmt (RETURN) ->  RETURN possible_expr
     {316, 1}, // 28: possible_expr ->  expr
     {316, 0}, // 29: possible_expr ->  <empty>
     {317, 1}, // 30: expr (BOOL) ->  BOOL
     {317, 1}, // 31: expr (INT) ->  INT
     {317, 1}, // 32: expr (DOUBLE) ->  DOUBLE
     {317, 1}, // 33: expr (ID) ->  ID
     {317, 1}, // 34: expr ->  funcall
     {317, 3}, // 35: expr (OPARENTHESIS) ->  OPARENTHESIS expr CPARENTHESIS
     {317, 2}, // 36: expr (NOT) ->  NOT expr
     {317, 2}, // 37: expr (NEG) ->  MINUS expr
     {317, 2}, // 38: expr (POS) ->  PLUS expr
     {317, 3}, // 39: expr (PLUS) ->  expr PLUS expr
     {317, 3}, // 40: expr (MINUS) ->  expr MINUS expr
     {317, 3}, // 41: expr (MULT) ->  expr MULT expr
     {317, 3}, // 42: expr (DIV) ->  expr DIV expr
     {317, 3}, // 43: expr (MOD) ->  expr MOD expr
     {317, 3}, // 44: expr (POW) ->  expr POW expr
     {317, 3}, // 45: expr (EQUAL) ->  expr EQUAL expr
     {317, 3}, // 46: expr (NOT_EQUAL) ->  expr NOT_EQUAL expr
     {317, 3}, // 47: expr (LT) ->  expr LT expr
     {317, 3}, // 48: expr (LE) ->  expr LE expr
     {317, 3}, // 49: expr (GT) ->  expr GT expr
     {317, 3}, // 50: expr (GE) ->  expr GE expr
     {317, 3}, // 51: expr (AND) ->  expr AND expr
     {317, 3}, // 52: expr (OR) ->  expr OR expr
     {318, 4}, // 53: funcall (ID) ->  ID OPARENTHESIS expr_list CPARENTHESIS
     {319, 2}, // 54: expr_list ->  expr multiple_expr
     {319, 0}, // 55: expr_list ->  <empty>
     {320, 3}, // 56: multiple_expr (COMMA) ->  multiple_expr COMMA expr
     {320, 0}, // 57: multiple_expr ->  <empty>
     {321, 1}, // 58: prog_$ ->  prog
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { DEF_RED}, {  3} },               
    { {     300}, {  1} }, // prog       
    { {     301}, {  2} }, // mainElement
    { {       0}, { -3} },               
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, { 4} },         
    { {     _EOF_}, { 3} }, // _EOF_
    { {       302}, { 4} }, // func 
    { {       273}, { 5} }, // FUNC 
    { {         0}, { 0} },         
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, { 2} },      
    { {       279}, { 6} }, // ID
    { {         0}, { 0} },      
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, { 3} },                
    { {       303}, { 7} }, // params      
    { {       262}, { 8} }, // OPARENTHESIS
    { {         0}, { 0} },                
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  3} },                      
    { {       304}, {  9} }, // block_instructions
    { {       266}, { 10} }, // OBRACER           
    { {         0}, {  0} },                      
};

SR__ s_8[] =
{
    { { REQ_DEF}, {  4} },              
    { {     305}, { 11} }, // paramlist 
    { {     306}, { 12} }, // param     
    { {     260}, { 13} }, // ANDPERSAND
    { {       0}, { -7} },              
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_10[] =
{
    { { REQ_DEF}, {  11} },               
    { {     308}, {  14} }, // instruction
    { {     310}, {  15} }, // assign     
    { {     311}, {  16} }, // ite_stmt   
    { {     312}, {  17} }, // while_stmt 
    { {     318}, {  18} }, // funcall    
    { {     313}, {  19} }, // return_stmt
    { {     279}, {  20} }, // ID         
    { {     268}, {  21} }, // IF         
    { {     270}, {  22} }, // WHILE      
    { {     274}, {  23} }, // RETURN     
    { {       0}, { -19} },               
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  2} },                
    { {       263}, { 24} }, // CPARENTHESIS
    { {         0}, {  0} },                
};

SR__ s_12[] =
{
    { { DEF_RED}, {  2} },                   
    { {     307}, { 25} }, // multiple_params
    { {       0}, { -9} },                   
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       279}, { 26} }, // ID
    { {         0}, {  0} },      
};

SR__ s_14[] =
{
    { { DEF_RED}, {   2} },                         
    { {     309}, {  27} }, // multiple_instrucitons
    { {       0}, { -13} },                         
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  3} },                
    { {       282}, { 28} }, // ASSIGMENT   
    { {       262}, { 29} }, // OPARENTHESIS
    { {         0}, {  0} },                
};

SR__ s_21[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 30} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 40} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_23[] =
{
    { { REQ_DEF}, {  12} },                 
    { {     316}, {  41} }, // possible_expr
    { {     317}, {  42} }, // expr         
    { {     276}, {  31} }, // BOOL         
    { {     277}, {  32} }, // INT          
    { {     278}, {  33} }, // DOUBLE       
    { {     279}, {  34} }, // ID           
    { {     318}, {  35} }, // funcall      
    { {     262}, {  36} }, // OPARENTHESIS 
    { {     298}, {  37} }, // NOT          
    { {     292}, {  38} }, // MINUS        
    { {     291}, {  39} }, // PLUS         
    { {       0}, { -29} },                 
};

SR__ s_24[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_25[] =
{
    { { REQ_DEF}, {  2} },         
    { {     257}, { 43} }, // COMMA
    { {       0}, { -6} },         
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  3} },             
    { {       267}, { 44} }, // CBRACER  
    { {       258}, { 45} }, // SEMICOLON
    { {         0}, {  0} },             
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 46} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_29[] =
{
    { { REQ_DEF}, {  12} },                
    { {     319}, {  47} }, // expr_list   
    { {     317}, {  48} }, // expr        
    { {     276}, {  31} }, // BOOL        
    { {     277}, {  32} }, // INT         
    { {     278}, {  33} }, // DOUBLE      
    { {     279}, {  34} }, // ID          
    { {     318}, {  35} }, // funcall     
    { {     262}, {  36} }, // OPARENTHESIS
    { {     298}, {  37} }, // NOT         
    { {     292}, {  38} }, // MINUS       
    { {     291}, {  39} }, // PLUS        
    { {       0}, { -55} },                
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, { 17} },                      
    { {       304}, { 49} }, // block_instructions
    { {       291}, { 50} }, // PLUS              
    { {       292}, { 51} }, // MINUS             
    { {       293}, { 52} }, // MULT              
    { {       294}, { 53} }, // DIV               
    { {       295}, { 54} }, // MOD               
    { {       299}, { 55} }, // POW               
    { {       285}, { 56} }, // EQUAL             
    { {       286}, { 57} }, // NOT_EQUAL         
    { {       287}, { 58} }, // LT                
    { {       288}, { 59} }, // LE                
    { {       289}, { 60} }, // GT                
    { {       290}, { 61} }, // GE                
    { {       284}, { 62} }, // AND               
    { {       283}, { 63} }, // OR                
    { {       266}, { 10} }, // OBRACER           
    { {         0}, {  0} },                      
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_34[] =
{
    { { REQ_DEF}, {   2} },                
    { {     262}, {  29} }, // OPARENTHESIS
    { {       0}, { -33} },                
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 64} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 65} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 66} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 67} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, { 17} },                      
    { {       304}, { 68} }, // block_instructions
    { {       291}, { 50} }, // PLUS              
    { {       292}, { 51} }, // MINUS             
    { {       293}, { 52} }, // MULT              
    { {       294}, { 53} }, // DIV               
    { {       295}, { 54} }, // MOD               
    { {       299}, { 55} }, // POW               
    { {       285}, { 56} }, // EQUAL             
    { {       286}, { 57} }, // NOT_EQUAL         
    { {       287}, { 58} }, // LT                
    { {       288}, { 59} }, // LE                
    { {       289}, { 60} }, // GT                
    { {       290}, { 61} }, // GE                
    { {       284}, { 62} }, // AND               
    { {       283}, { 63} }, // OR                
    { {       266}, { 10} }, // OBRACER           
    { {         0}, {  0} },                      
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_42[] =
{
    { { REQ_DEF}, {  15} },             
    { {     291}, {  50} }, // PLUS     
    { {     292}, {  51} }, // MINUS    
    { {     293}, {  52} }, // MULT     
    { {     294}, {  53} }, // DIV      
    { {     295}, {  54} }, // MOD      
    { {     299}, {  55} }, // POW      
    { {     285}, {  56} }, // EQUAL    
    { {     286}, {  57} }, // NOT_EQUAL
    { {     287}, {  58} }, // LT       
    { {     288}, {  59} }, // LE       
    { {     289}, {  60} }, // GT       
    { {     290}, {  61} }, // GE       
    { {     284}, {  62} }, // AND      
    { {     283}, {  63} }, // OR       
    { {       0}, { -28} },             
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       306}, { 69} }, // param     
    { {       260}, { 13} }, // ANDPERSAND
    { {         0}, {  0} },              
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_45[] =
{
    { { REQ_DEF}, {  11} },               
    { {     308}, {  70} }, // instruction
    { {     310}, {  15} }, // assign     
    { {     311}, {  16} }, // ite_stmt   
    { {     312}, {  17} }, // while_stmt 
    { {     318}, {  18} }, // funcall    
    { {     313}, {  19} }, // return_stmt
    { {     279}, {  20} }, // ID         
    { {     268}, {  21} }, // IF         
    { {     270}, {  22} }, // WHILE      
    { {     274}, {  23} }, // RETURN     
    { {       0}, { -19} },               
};

SR__ s_46[] =
{
    { { REQ_DEF}, {  15} },             
    { {     291}, {  50} }, // PLUS     
    { {     292}, {  51} }, // MINUS    
    { {     293}, {  52} }, // MULT     
    { {     294}, {  53} }, // DIV      
    { {     295}, {  54} }, // MOD      
    { {     299}, {  55} }, // POW      
    { {     285}, {  56} }, // EQUAL    
    { {     286}, {  57} }, // NOT_EQUAL
    { {     287}, {  58} }, // LT       
    { {     288}, {  59} }, // LE       
    { {     289}, {  60} }, // GT       
    { {     290}, {  61} }, // GE       
    { {     284}, {  62} }, // AND      
    { {     283}, {  63} }, // OR       
    { {       0}, { -20} },             
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {  2} },                
    { {       263}, { 71} }, // CPARENTHESIS
    { {         0}, {  0} },                
};

SR__ s_48[] =
{
    { { REQ_DEF}, {  16} },                 
    { {     320}, {  72} }, // multiple_expr
    { {     291}, {  50} }, // PLUS         
    { {     292}, {  51} }, // MINUS        
    { {     293}, {  52} }, // MULT         
    { {     294}, {  53} }, // DIV          
    { {     295}, {  54} }, // MOD          
    { {     299}, {  55} }, // POW          
    { {     285}, {  56} }, // EQUAL        
    { {     286}, {  57} }, // NOT_EQUAL    
    { {     287}, {  58} }, // LT           
    { {     288}, {  59} }, // LE           
    { {     289}, {  60} }, // GT           
    { {     290}, {  61} }, // GE           
    { {     284}, {  62} }, // AND          
    { {     283}, {  63} }, // OR           
    { {       0}, { -57} },                 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   2} },           
    { {     314}, {  73} }, // else_if
    { {       0}, { -23} },           
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 74} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 75} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 76} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 77} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 78} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 79} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 80} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 81} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 82} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 83} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 84} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 85} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 86} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 87} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, { 16} },                
    { {       263}, { 88} }, // CPARENTHESIS
    { {       291}, { 50} }, // PLUS        
    { {       292}, { 51} }, // MINUS       
    { {       293}, { 52} }, // MULT        
    { {       294}, { 53} }, // DIV         
    { {       295}, { 54} }, // MOD         
    { {       299}, { 55} }, // POW         
    { {       285}, { 56} }, // EQUAL       
    { {       286}, { 57} }, // NOT_EQUAL   
    { {       287}, { 58} }, // LT          
    { {       288}, { 59} }, // LE          
    { {       289}, { 60} }, // GT          
    { {       290}, { 61} }, // GE          
    { {       284}, { 62} }, // AND         
    { {       283}, { 63} }, // OR          
    { {         0}, {  0} },                
};

SR__ s_65[] =
{
    { { REQ_DEF}, {   2} },       
    { {     299}, {  55} }, // POW
    { {       0}, { -36} },       
};

SR__ s_66[] =
{
    { { REQ_DEF}, {   2} },       
    { {     299}, {  55} }, // POW
    { {       0}, { -37} },       
};

SR__ s_67[] =
{
    { { REQ_DEF}, {   2} },       
    { {     299}, {  55} }, // POW
    { {       0}, { -38} },       
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_72[] =
{
    { { REQ_DEF}, {   2} },         
    { {     257}, {  89} }, // COMMA
    { {       0}, { -54} },         
};

SR__ s_73[] =
{
    { { REQ_DEF}, {   3} },        
    { {     315}, {  90} }, // else
    { {     269}, {  91} }, // ELSE
    { {       0}, { -25} },        
};

SR__ s_74[] =
{
    { { REQ_DEF}, {   5} },        
    { {     293}, {  52} }, // MULT
    { {     294}, {  53} }, // DIV 
    { {     295}, {  54} }, // MOD 
    { {     299}, {  55} }, // POW 
    { {       0}, { -39} },        
};

SR__ s_75[] =
{
    { { REQ_DEF}, {   5} },        
    { {     293}, {  52} }, // MULT
    { {     294}, {  53} }, // DIV 
    { {     295}, {  54} }, // MOD 
    { {     299}, {  55} }, // POW 
    { {       0}, { -40} },        
};

SR__ s_76[] =
{
    { { REQ_DEF}, {   2} },       
    { {     299}, {  55} }, // POW
    { {       0}, { -41} },       
};

SR__ s_77[] =
{
    { { REQ_DEF}, {   2} },       
    { {     299}, {  55} }, // POW
    { {       0}, { -42} },       
};

SR__ s_78[] =
{
    { { REQ_DEF}, {   2} },       
    { {     299}, {  55} }, // POW
    { {       0}, { -43} },       
};

SR__ s_79[] =
{
    { { REQ_DEF}, {   2} },       
    { {     299}, {  55} }, // POW
    { {       0}, { -44} },       
};

SR__ s_80[] =
{
    { { REQ_DEF}, {   7} },         
    { {     291}, {  50} }, // PLUS 
    { {     292}, {  51} }, // MINUS
    { {     293}, {  52} }, // MULT 
    { {     294}, {  53} }, // DIV  
    { {     295}, {  54} }, // MOD  
    { {     299}, {  55} }, // POW  
    { {       0}, { -45} },         
};

SR__ s_81[] =
{
    { { REQ_DEF}, {   7} },         
    { {     291}, {  50} }, // PLUS 
    { {     292}, {  51} }, // MINUS
    { {     293}, {  52} }, // MULT 
    { {     294}, {  53} }, // DIV  
    { {     295}, {  54} }, // MOD  
    { {     299}, {  55} }, // POW  
    { {       0}, { -46} },         
};

SR__ s_82[] =
{
    { { REQ_DEF}, {   7} },         
    { {     291}, {  50} }, // PLUS 
    { {     292}, {  51} }, // MINUS
    { {     293}, {  52} }, // MULT 
    { {     294}, {  53} }, // DIV  
    { {     295}, {  54} }, // MOD  
    { {     299}, {  55} }, // POW  
    { {       0}, { -47} },         
};

SR__ s_83[] =
{
    { { REQ_DEF}, {   7} },         
    { {     291}, {  50} }, // PLUS 
    { {     292}, {  51} }, // MINUS
    { {     293}, {  52} }, // MULT 
    { {     294}, {  53} }, // DIV  
    { {     295}, {  54} }, // MOD  
    { {     299}, {  55} }, // POW  
    { {       0}, { -48} },         
};

SR__ s_84[] =
{
    { { REQ_DEF}, {   7} },         
    { {     291}, {  50} }, // PLUS 
    { {     292}, {  51} }, // MINUS
    { {     293}, {  52} }, // MULT 
    { {     294}, {  53} }, // DIV  
    { {     295}, {  54} }, // MOD  
    { {     299}, {  55} }, // POW  
    { {       0}, { -49} },         
};

SR__ s_85[] =
{
    { { REQ_DEF}, {   7} },         
    { {     291}, {  50} }, // PLUS 
    { {     292}, {  51} }, // MINUS
    { {     293}, {  52} }, // MULT 
    { {     294}, {  53} }, // DIV  
    { {     295}, {  54} }, // MOD  
    { {     299}, {  55} }, // POW  
    { {       0}, { -50} },         
};

SR__ s_86[] =
{
    { { REQ_DEF}, {  13} },             
    { {     291}, {  50} }, // PLUS     
    { {     292}, {  51} }, // MINUS    
    { {     293}, {  52} }, // MULT     
    { {     294}, {  53} }, // DIV      
    { {     295}, {  54} }, // MOD      
    { {     299}, {  55} }, // POW      
    { {     285}, {  56} }, // EQUAL    
    { {     286}, {  57} }, // NOT_EQUAL
    { {     287}, {  58} }, // LT       
    { {     288}, {  59} }, // LE       
    { {     289}, {  60} }, // GT       
    { {     290}, {  61} }, // GE       
    { {       0}, { -51} },             
};

SR__ s_87[] =
{
    { { REQ_DEF}, {  14} },             
    { {     291}, {  50} }, // PLUS     
    { {     292}, {  51} }, // MINUS    
    { {     293}, {  52} }, // MULT     
    { {     294}, {  53} }, // DIV      
    { {     295}, {  54} }, // MOD      
    { {     299}, {  55} }, // POW      
    { {     285}, {  56} }, // EQUAL    
    { {     286}, {  57} }, // NOT_EQUAL
    { {     287}, {  58} }, // LT       
    { {     288}, {  59} }, // LE       
    { {     289}, {  60} }, // GT       
    { {     290}, {  61} }, // GE       
    { {     284}, {  62} }, // AND      
    { {       0}, { -52} },             
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 92} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  4} },                      
    { {       268}, { 93} }, // IF                
    { {       304}, { 94} }, // block_instructions
    { {       266}, { 10} }, // OBRACER           
    { {         0}, {  0} },                      
};

SR__ s_92[] =
{
    { { REQ_DEF}, {  15} },             
    { {     291}, {  50} }, // PLUS     
    { {     292}, {  51} }, // MINUS    
    { {     293}, {  52} }, // MULT     
    { {     294}, {  53} }, // DIV      
    { {     295}, {  54} }, // MOD      
    { {     299}, {  55} }, // POW      
    { {     285}, {  56} }, // EQUAL    
    { {     286}, {  57} }, // NOT_EQUAL
    { {     287}, {  58} }, // LT       
    { {     288}, {  59} }, // LE       
    { {     289}, {  60} }, // GT       
    { {     290}, {  61} }, // GE       
    { {     284}, {  62} }, // AND      
    { {     283}, {  63} }, // OR       
    { {       0}, { -56} },             
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, { 11} },                
    { {       317}, { 95} }, // expr        
    { {       276}, { 31} }, // BOOL        
    { {       277}, { 32} }, // INT         
    { {       278}, { 33} }, // DOUBLE      
    { {       279}, { 34} }, // ID          
    { {       318}, { 35} }, // funcall     
    { {       262}, { 36} }, // OPARENTHESIS
    { {       298}, { 37} }, // NOT         
    { {       292}, { 38} }, // MINUS       
    { {       291}, { 39} }, // PLUS        
    { {         0}, {  0} },                
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, { 17} },                      
    { {       304}, { 96} }, // block_instructions
    { {       291}, { 50} }, // PLUS              
    { {       292}, { 51} }, // MINUS             
    { {       293}, { 52} }, // MULT              
    { {       294}, { 53} }, // DIV               
    { {       295}, { 54} }, // MOD               
    { {       299}, { 55} }, // POW               
    { {       285}, { 56} }, // EQUAL             
    { {       286}, { 57} }, // NOT_EQUAL         
    { {       287}, { 58} }, // LT                
    { {       288}, { 59} }, // LE                
    { {       289}, { 60} }, // GT                
    { {       290}, { 61} }, // GE                
    { {       284}, { 62} }, // AND               
    { {       283}, { 63} }, // OR                
    { {       266}, { 10} }, // OBRACER           
    { {         0}, {  0} },                      
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

// $insert defaultactionreturn
                            // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 30:
#line 130 "parser.y"
        {
         }
        break;

        case 31:
#line 134 "parser.y"
        {
        
        
         }
        break;

        case 32:
#line 140 "parser.y"
        {
        
        
         }
        break;

        case 33:
#line 146 "parser.y"
        {
        
         }
        break;

        case 34:
#line 155 "parser.y"
        {
         }
        break;

        case 35:
#line 159 "parser.y"
        {
         }
        break;

        case 36:
#line 163 "parser.y"
        {
         }
        break;

        case 37:
#line 167 "parser.y"
        {
        
        
         }
        break;

        case 38:
#line 173 "parser.y"
        {
         }
        break;

        case 39:
#line 177 "parser.y"
        {
        
        
         }
        break;

        case 40:
#line 183 "parser.y"
        {
         }
        break;

        case 41:
#line 187 "parser.y"
        {
         }
        break;

        case 42:
#line 191 "parser.y"
        {
         }
        break;

        case 43:
#line 195 "parser.y"
        {
         }
        break;

        case 44:
#line 199 "parser.y"
        {
         }
        break;

        case 45:
#line 203 "parser.y"
        {
         }
        break;

        case 46:
#line 207 "parser.y"
        {
         }
        break;

        case 47:
#line 211 "parser.y"
        {
         }
        break;

        case 48:
#line 215 "parser.y"
        {
         }
        break;

        case 49:
#line 219 "parser.y"
        {
         }
        break;

        case 50:
#line 223 "parser.y"
        {
         }
        break;

        case 51:
#line 227 "parser.y"
        {
         }
        break;

        case 52:
#line 231 "parser.y"
        {
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



